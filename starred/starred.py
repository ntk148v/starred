#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from io import BytesIO
from collections import OrderedDict
import click
from github3 import GitHub
from github3.exceptions import NotFoundError
from pytablewriter import MarkdownTableWriter
from . import VERSION
from .githubgql import GitHubGQL


DEFAULT_CATEGORY = 'Others'
TEXT_LENGTH_LIMIT = 200

desc = '''<!--lint disable awesome-contributing awesome-license awesome-list-item match-punctuation no-repeat-punctuation no-undefined-references awesome-spell-check-->
# Awesome Stars [![Awesome](https://awesome.re/badge.svg)](https://github.com/sindresorhus/awesome)

> > A curated list of my GitHub stars!  Generated by [starred](https://github.com/ntk148v/starred).

## Contents
'''

license_ = '''
## License
[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)]\
(https://creativecommons.org/publicdomain/zero/1.0/)

To the extent possible under law, [{username}](https://github.com/{username})\
 has waived all copyright and related or neighboring rights to this work.
'''

html_escape_table = {
    ">": "&gt;",
    "<": "&lt;",
}


def html_escape(text):
    """Produce entities within text."""
    return "".join(html_escape_table.get(c, c) for c in text)


@click.command()
@click.option('--username', envvar='USER', required=True, help='GitHub username')
@click.option('--token', envvar='GITHUB_TOKEN', required=True, help='GitHub token')
@click.option('--sort',  is_flag=True, show_default=True, help='sort by category[language/topic] name alphabetically')
@click.option('--topic', is_flag=True, show_default=True, help='category by topic, default is category by language')
@click.option('--topic_limit', default=500, show_default=True, type=int, help='topic stargazer_count gt number, set bigger to reduce topics number')
@click.option('--repository', default='', show_default=True, help='repository name')
@click.option('--filename', default='README.md', show_default=True, help='file name')
@click.option('--message', default='update awesome-stars, created by starred', show_default=True, help='commit message')
@click.option('--private', is_flag=True, default=False, show_default=True, help='include private repos')
@click.option('--format', type=click.Choice(['table', 'list']), default='table',
              help='output repository information format')
@click.version_option(version=VERSION, prog_name='starred')
def starred(username, token, sort, topic, topic_limit,
            repository, filename, message, private, format):
    """GitHub starred

    creating your own Awesome List by GitHub stars!

    example:
        starred --username ntk148v --token=xxxxxxxx --sort > README.md
    """

    gh = GitHubGQL(token)
    try:
        stars = gh.get_user_starred_by_username(
            username, topic_stargazer_count_limit=topic_limit)
    except Exception as e:
        click.secho(f'Error: {e}', fg='red')
        return

    if repository:
        file = BytesIO()
        sys.stdout = file
    else:
        file = None

    click.echo(desc)
    repo_dict = {}
    # Just a dict to store index
    repo_num_dict = {}

    for s in stars:
        # skip private repos if --private is not set
        if s.is_private and not private:
            continue

        description = html_escape(s.description).replace('\n', '').strip()[
            :TEXT_LENGTH_LIMIT] if s.description else ''

        if topic:
            topics = s.topics or [DEFAULT_CATEGORY.lower()]
        else:
            topics = [s.language or DEFAULT_CATEGORY]

        for category in topics:
            if category not in repo_dict:
                repo_dict[category] = []
                repo_num_dict[category] = 1
            repo_dict[category].append([repo_num_dict[category],
                                        '[{}]({})'.format(s.name, s.url),
                                        description])
            repo_num_dict[category] += 1

    if sort:
        repo_dict = OrderedDict(sorted(repo_dict.items(), key=lambda l: l[0]))

    for category in repo_dict.keys():
        data = u'  - [{}](#{})'.format(category,
                                       '-'.join(category.lower().split()))
        click.echo(data)
    click.echo('')

    for category in repo_dict:
        click.echo('## {} \n'.format(category.replace('#', '# #')))
        if format == 'table':
            writer = MarkdownTableWriter(
                headers=['Index', 'Name', 'Repository URL', 'Description'],
                value_matrix=repo_dict[category],
                margin=1)
            click.echo(writer.dumps())
        else:
            for repo in repo_dict[category]:
                data = u'{}. {} - {}'.format(*repo)
                click.echo(data)
        click.echo('')

    click.echo(license_.format(username=username))

    if file:
        gh = GitHub(token=token)
        user = gh.user(username)
        try:
            rep = gh.repository(username, repository)
            try:
                rep.file_contents(
                    f'/{filename}').update(message, file.getvalue())
            except NotFoundError:
                rep.create_file(filename, message, file.getvalue(),
                                author={'name': user.name, 'email': user.email})
        except NotFoundError:
            rep = gh.create_repository(
                repository, 'A curated list of my GitHub stars!')
            rep.create_file(filename, 'starred initial commit', file.getvalue(),
                            author={'name': user.name, 'email': user.email})
        click.launch(rep.html_url)


if __name__ == '__main__':
    starred()
